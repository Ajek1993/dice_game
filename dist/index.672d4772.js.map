{"mappings":"AAAA,MAAM,UAAU,SAAS,eAAe;AACxC,MAAM,WAAW,SAAS,eAAe;AACzC,MAAM,eAAe,SAAS,iBAAiB;AAC/C,MAAM,SAAS,SAAS,eAAe;AACvC,MAAM,QAAQ,SAAS,cAAc;AACrC,MAAM,WAAW,SAAS,cAAc;AAExC,IAAI,gBAAgB;AAEpB,QAAQ,iBAAiB,SAAS;IAChC,IAAI,iBAAiB,IAAI;QACvB,OAAO,YACL;QACF;IACF;IACA,OAAO,YAAY;IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,QAAQ,IAAK;QAC5C,MAAM,YAAY;QAClB,YAAY,CAAC,EAAE,CAAC,YAAY;IAC9B;IACA,UAAU;AACZ;AAEA,SAAS,iBAAiB,SAAS;IACjC,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,QAAQ,IACvC,YAAY,CAAC,EAAE,CAAC,cAAc;IAEhC,MAAO,SAAS,mBACd,SAAS,cAAc,iBAAiB;IAE1C,gBAAgB;IAChB,OAAO,YAAY;AACrB;AAEA,MAAM,kBAAkB;IACtB,OAAO,KAAK,KAAK,KAAK,WAAW;AACnC;AAEA,MAAM,cAAc,CAAC;IACnB,MAAM,SAAS,MAAM,KAAK,MACvB,IAAI,CAAC,IAAM,CAAC,EAAE,WACd,KAAK,CAAC,GAAG,IAAM,IAAI;IACtB,QAAQ,IAAI;IAEZ,MAAM,eAAe;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IACvC,OAAO,QAAQ,CAAC,IAAM,YAAY,CAAC,IAAI,EAAE;IAEzC,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,QAAQ,IAAK;QAC5C,IACE,aAAa,QAAQ,MACrB,aAAa,YAAY,MACzB,aAAa,QAAQ,OAAO,aAAa,YAAY,IAErD,OAAO,CAAC,YAAY,EAAE,aAAa,QAAQ,KAAK,EAAE,MAAM,EACtD,aAAa,YAAY,KAAK,EAC/B,CAAC;QAEJ,IAAI,aAAa,SAAS,MAAM,aAAa,SAAS,IACpD,OAAO,CAAC,OAAO,EAAE,aAAa,QAAQ,KAAK,EAAE,MAAM,EACjD,aAAa,QAAQ,KAAK,EAC3B,CAAC;QAEJ,IAAI,aAAa,KAAK,IAAI,SAAS,WAAW,OAAO;QACrD,IAAI,aAAa,KAAK,IAAI,SAAS,WAAW,OAAO;QACrD,IAAI,aAAa,SAAS,IACxB,OAAO,YAAa,CAAA,aAAa,QAAQ,KAAK,CAAA;QAChD,IAAI,aAAa,SAAS,IACxB,OAAO,iBAAe,CAAA,aAAa,QAAQ,KAAK,CAAA;QAClD,IAAI,aAAa,SAAS,IACxB,OAAO,cAAe,CAAA,aAAa,QAAQ,KAAK,CAAA;QAClD,IAAI,aAAa,SAAS,IACxB,OAAO,aAAc,CAAA,aAAa,QAAQ,KAAK,CAAA;IACnD;IAEA,OAAO,OAAO,OAAO,CAAC,GAAG,IAAM,IAAI;AACrC;AAEA,MAAM,YAAY,CAAC;IACjB,MAAM,QAAQ,SAAS,UAAU;IACjC,MAAM,iBAAiB,YAAY,YAAY;IAC/C,SAAS,cAAc,YAAY;IACnC;IACA,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,QAAQ,IAAK;QAC5C,MAAM,kBAAkB,YAAY;QACpC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,YAAY,YAAY,CAAC,EAAE,CAAC;IACpD;AACF","sources":["script.js"],"sourcesContent":["const btnPlay = document.getElementById(\"btn\");\r\nconst btnReset = document.getElementById(\"btn-reset\");\r\nconst scoreNumbers = document.querySelectorAll(\".dice_score\");\r\nconst figure = document.getElementById(\"figures\");\r\nconst table = document.querySelector(\".table_score\");\r\nconst tableRow = document.querySelector(\".table_row\");\r\n\r\nlet numbersOfGame = 0;\r\n\r\nbtnPlay.addEventListener(\"click\", () => {\r\n  if (numbersOfGame >= 15) {\r\n    figure.innerText =\r\n      \"You have reached your game limit, click reset to play again\";\r\n    return;\r\n  }\r\n  figure.innerText = \"Click play to try again\";\r\n  for (let i = 0; i < scoreNumbers.length; i++) {\r\n    const newNumber = getRandomNumber();\r\n    scoreNumbers[i].innerText = newNumber;\r\n  }\r\n  fillTable(scoreNumbers);\r\n});\r\n\r\nbtnReset.addEventListener(\"click\", () => {\r\n  for (let i = 0; i < scoreNumbers.length; i++) {\r\n    scoreNumbers[i].textContent = \"\";\r\n  }\r\n  while (tableRow.nextElementSibling) {\r\n    tableRow.parentElement.lastElementChild.remove();\r\n  }\r\n  numbersOfGame = 0;\r\n  figure.innerText = \"Click play\";\r\n});\r\n\r\nconst getRandomNumber = () => {\r\n  return Math.ceil(Math.random() * 6);\r\n};\r\n\r\nconst pointsCount = (nums) => {\r\n  const numArr = Array.from(nums)\r\n    .map((e) => +e.innerText)\r\n    .sort((a, b) => a - b);\r\n  console.log(numArr);\r\n\r\n  const countNumbers = [0, 0, 0, 0, 0, 0];\r\n  numArr.forEach((e) => countNumbers[e - 1]++);\r\n\r\n  for (let i = 0; i < countNumbers.length; i++) {\r\n    if (\r\n      countNumbers.indexOf(2) &&\r\n      countNumbers.lastIndexOf(2) &&\r\n      countNumbers.indexOf(2) !== countNumbers.lastIndexOf(2)\r\n    ) {\r\n      return `Dwie pary z ${countNumbers.indexOf(2) + 1} oraz ${\r\n        countNumbers.lastIndexOf(2) + 1\r\n      }`;\r\n    }\r\n    if (countNumbers.includes(2) && countNumbers.includes(3))\r\n      return `Full z ${countNumbers.indexOf(2) + 1} oraz ${\r\n        countNumbers.indexOf(3) + 1\r\n      }`;\r\n\r\n    if (countNumbers.join(\"\").includes(\"111110\")) return \"Mały strit\";\r\n    if (countNumbers.join(\"\").includes(\"011111\")) return \"Duży strit\";\r\n    if (countNumbers.includes(2))\r\n      return \"Para z \" + (countNumbers.indexOf(2) + 1);\r\n    if (countNumbers.includes(3))\r\n      return \"Trójka z \" + (countNumbers.indexOf(3) + 1);\r\n    if (countNumbers.includes(4))\r\n      return \"Kareta z \" + (countNumbers.indexOf(4) + 1);\r\n    if (countNumbers.includes(5))\r\n      return \"Poker z \" + (countNumbers.indexOf(5) + 1);\r\n  }\r\n\r\n  return numArr.reduce((a, c) => a + c);\r\n};\r\n\r\nconst fillTable = (scoreNumbers) => {\r\n  const newTr = tableRow.cloneNode(true);\r\n  newTr.lastElementChild.innerText = pointsCount(scoreNumbers);\r\n  tableRow.parentElement.appendChild(newTr);\r\n  numbersOfGame++;\r\n  for (let i = 0; i < scoreNumbers.length; i++) {\r\n    newTr.firstElementChild.innerText = numbersOfGame;\r\n    newTr.children[i + 1].innerText = scoreNumbers[i].innerText;\r\n  }\r\n};\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}